library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages('manipulate')
library(caret); library(kernlab); data(spam)
inTrain <‐ createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <‐ spam[inTrain,]
testing <‐ spam[‐inTrain,]
dim(training)
install.packages('caret')
library(caret); library(kernlab); data(spam)
install.packages('kernlab')
library(caret); library(kernlab); data(spam)
inTrain <‐ createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <‐ spam[inTrain,]
testing <‐ spam[‐inTrain,]
dim(training)
set.seed(32343)
modelFit <‐ train(type ~.,data=training, method="glm")
install.packages('e1071')
modelFit <‐ train(type ~.,data=training, method="glm")
warnings()
wmodelFit
modelFit
modelFit$finalModel
predictions <‐ predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
modelFit <‐ train(type ~.,data=training, method="glm")
install.packages('doMC')
install.packages('doMPI')
library(doMPI)
registerDoMPI(cores = 12)
library(doMPI)
install.packages('Rmpi')
install.packages('doMPI')
install.packages('parallel')
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
library(parallel)
modelFit <‐ train(type ~.,data=training, method="glm")
library(caret); library(kernlab); data(spam)
inTrain <‐ createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <‐ spam[inTrain,]
testing <‐ spam[‐inTrain,]
dim(training)
set.seed(32343)
modelFit <‐ train(type ~.,data=training, method="glm")
library(doParallel);
install.packages('doParallel')
library(doParallel);
library(caret); library(kernlab); data(spam)
inTrain <‐ createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <‐ spam[inTrain,]
testing <‐ spam[‐inTrain,]
dim(training)
set.seed(32343)
modelFit <‐ train(type ~.,data=training, method="glm")
cl <- makeCluster(detectCores())
registerDoParallel(cl)
modelFit <‐ train(type ~.,data=training, method="glm")
stopCluster(cl)
confusionMatrix(predictions,training$type)
predictions <‐ predict(modelFit,newdata=testing)
confusionMatrix(predictions,training$type)
predictions <‐ predict(modelFit,newdata=testing)
confusionMatrix(predictions,testing$type)
training$type
testing$type
predictions <‐ predict(modelFit,newdata=ttraining
confusionMatrix(predictions,training$type)
predictions <‐ predict(modelFit,newdata=training)
confusionMatrix(predictions,training$type)
predictions <‐ predict(modelFit,newdata=testing)
confusionMatrix(predictions,testing$type)
folds <‐ createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds <‐ createFolds(y=spam$type,k=10,list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds <‐ createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
sapply(folds,length)
setwd("~/Coursera/Data Science/Developing Data Product")
author("first_deck2")
library(slidify)
library(knitr)
setwd("~/Coursera/Data Science/Developing Data Product")
author("first_deck2")
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex == 'Male'))
n1$print('chart1')
slidify('index.Rmd')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex == 'Male'))
n1$print('chart1')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
getwd()
slidify('index.Rmd')
setwd("~/Coursera/Data Science/Developing Data Product")
author("first_deck3")
slidify('index.Rmd')
